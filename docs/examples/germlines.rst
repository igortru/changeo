.. _Germlines:

Reconstructing germline sequences
================================================================================

Example Data
--------------------------------------------------------------------------------

We have hosted a small example data set resulting from the
`Roche 454 example workflow <http://presto.readthedocs.org/en/latest/workflows/Jiang2013_Workflow.html>`__
described in the `pRESTO <http://presto.readthedocs.org>`__ documentation. The files can be
downloded from here:

`Change-O Example Files <http://clip.med.yale.edu/changeo/rtd/Changeo_Example.tar.gz>`__

The following examples use the ``S43_db-pass_parse-select.tab`` database file provided in
the example bundle, which has already undergone the :ref:`IMGT <IMGT>`/:ref:`IgBLAST <IgBLAST>`
parsing and :ref:`filtering <Filtering-Functional>` operations.

Adding germline sequences to the database
--------------------------------------------------------------------------------

The :ref:`CreateGermlines` tool is used to reconstruct the germline V(D)J sequence,
from which the Ig lineage and mutations can be inferred. The alignment information is saved
by :ref:`MakeDb`, but the germline gene segment sequences that were used for
the alignment must be passed to the :option:`-r <CreateGermlines -r>` argument.
Because the D-segment call for B cell receptor alignments is often low confidence, the default
germline format (:option:`-g dmask <CreateGermlines -g>`) places Ns in the N/P and D-segments
of the junction region rather than using the D-segment assigned during reference alignment;
this can be modified to generate a complete germline (:option:`-g full <CreateGermlines -g>`)
or a V-segment only germline (:option:`-g vonly <CreateGermlines -g>`) if you wish.
The command below adds the germline sequence to the ``GERMLINE_IMGT_D_MASK`` column of
the output database::

    CreateGermlines.py -d S43_db-pass_parse-select.tab -r IMGT_Human_IGH[VDJ].fasta -g dmask

Alternatively, if you have run the :ref:`clonal assignment <Cloning>` task prior to invoking
:ref:`CreateGermlines`, then adding the :option:`--cloned <CreateGermlines --cloned>`
argument is recommended, as this will generate a single germline of consensus length for each clone::

    CreateGermlines.py -d S43_db-pass_parse-select_clone-pass.tab -r IMGT_Human_IGH[VDJ].fasta \
        -g dmask --cloned

.. seealso::

    The `TIgGER <http://kleinstein.bitbucket.org/tigger>`__ R package provided tools for
    identifing novel polymorphisms and building a personalized germline database. To
    use the germline corrections provided by `TIgGER <http://kleinstein.bitbucket.org/tigger>`__
    you would replace the V-segment germline file with the one generated by
    `genotypeFasta <http://kleinstein.bitbucket.org/tigger/genotypeFasta.html>`__
    (:option:`-r IGHV_genotype.fasta IMGT_Human_IGH[DJ].fasta <CreateGermlines -r>`) and
    specify the genotyped V-segment column (:option:`--vf V_CALL_GENOTYPED <CreateGermlines --vf>`)::

        CreateGermlines.py -d genotyped.tab -r IGHV_genotype.fasta IMGT_Human_IGH[DJ].fasta \
            -g dmask --vf V_CALL_GENOTYPED


