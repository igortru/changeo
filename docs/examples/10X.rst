
.. _10X:

Parsing 10X Genomics V(D)J data
================================================================================

Example data
--------------------------------------------------------------------------------

10X Genomics provides an example data set of Ig V(D)J processed by the Cell
Ranger pipeline, which is available for download from their
`Single Cell Immune Profiling <https://support.10xgenomics.com/single-cell-vdj/datasets/3.0.0/vdj_v1_hs_pbmc2_b>`__
support site.

Converting 10X VDJ data into Change-O format
--------------------------------------------------------------------------------

To process 10X VDJ data, a combination of :ref:`AssignGenes` and :ref:`MakeDb` can be used to 
generate a TSV file conforming to :ref:`Change-O <Standard>` that incorporates 
annotation information provided by the Cell Ranger pipeline. The :option:`--10x filtered_contig_annotations.csv <MakeDb>` 
specifies the path of the contig annotations file generated by ```cellranger vdj``` (found in the ```outs``` directory). 

Generate Change-O formatted data from the 10X V(D)J FASTA files using the
steps below::

	AssignGenes.py igblast -s filtered_contig.fasta -b ~/share/igblast \
	   --organism human --loci ig --format blast
	MakeDb.py igblast -i filtered_contig_igblast.fmt7 -s filtered_contig.fasta \
	   -r IMGT_Human_IGHV.fasta IMGT_Human_IGHD.fasta IMGT_Human_IGHJ.fasta \
	   --10x filtered_contig_annotations.csv --regions --scores

all_contig.fasta can be exchanged for filtered_contig.fasta, and all_contig_annotations.csv can be exchanged 
for filtered_contig_annotations.csv. 

.. note::

	To process mouse data, replace ```human``` with mouse and provide the 
	appropriate ```IMGT_Mouse_IGHV.fasta IMGT_Mouse_IGHD.fasta IMGT_Mouse_IGHJ.fasta``` files. 

.. seealso::

    See the :ref:`IgBLAST usage guide <IgBLAST>` for further details regarding
    the setup and use of IgBLAST.

.. warning::

    The resulting table contains two V and J segment assignments corresponding to
    those generated by IgBLAST and those generated by Cell Ranger. 

Combining existing Change-O format 10X VDJ data with 10X VDJ annotations
--------------------------------------------------------------------------------

`Change-O <Standard>` compliant TSV files can also be merged without the use of :ref:`MakeDb`.
`merge10x.py <https://bitbucket.org/kleinstein/immcantation/src/tip/scripts/merge10x.py>`__,
can be used to perform the merge is provided on the
`Immcantation Bitbucket repository <https://bitbucket.org/kleinstein/immcantation>`__
in the ``scripts`` directory. The following example shows how to merge the
Change-O file (``10x_igblast_db-pass.tab``) with a 10X annotation file
(``filtered_contig_annotations.csv``) and save it as ``10x_annotated_db-pass.tab``::

	merge10x.py 10x_igblast_db-pass.tab filtered_contig_annotations.csv 10x_annotated_db-pass.tab

.. warning::
    Using `merge10x.py <https://bitbucket.org/kleinstein/immcantation/src/tip/scripts/merge10x.py>`__, 
    does not guarantee the generation of :ref:`Change-O <Standard>` files. 

Cloning Change-O format 10X VDJ data
--------------------------------------------------------------------------------

To clone Change-O format data, the output from :ref:`MakeDb` must be parsed into a light chain
:ref:`Change-O <Standard>` file and a heavy chain  :ref:`Change-O <Standard>` file::

	ParseDb.py select -d 10x_igblast_db-pass.tab -f LOCUS -u "IGH" \
	    --logic all --regex --outname heavy
	ParseDb.py select -d 10x_igblast_db-pass.tab -f LOCUS -u "IG[LK]" \
	    --logic all --regex --outname light

The heavy chain file must then be clonally clustered. 

.. seealso::

	See `Assigning clones <http://shazam.readthedocs.io/en/latest/examples/cloning.html>`__
	for futher details on clustering the heavy chain output. 

:ref:`DefineClones` currently does not support light chain cloning. However cloning can be performed
using `light_cluster.py <https://bitbucket.org/kleinstein/immcantation/src/tip/scripts/light_cluster.py>`__ 
or `light_majority.py <https://bitbucket.org/kleinstein/immcantation/src/tip/scripts/light_majority.py>`__ 
provided on the `Immcantation Bitbucket repository <https://bitbucket.org/kleinstein/immcantation>`__
in the ``scripts`` directory::

	light_cluster.py heavy_select-pass_clone-pass.tab light_select-pass.tab CELL CLONE 10X_clone-pass.tab

Here, ```10X_heavy_clone-pass.tab``` refers to the cloned heavy chain Change-O format file. 
```10X_light.tab``` refers to the light chain Change-O format file. ```CELL``` and ```CLONE``` are Change-O
standard fields. ```10X_clone-pass.tab``` is the output file. 

